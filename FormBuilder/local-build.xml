<?xml version="1.0"?>
<!--
  Copyright (C) 2013 HealthCare IT, Inc. - All Rights Reserved
  Unauthorized copying or redistribution of this file in source and binary forms via any medium is strictly prohibited
  Proprietary and confidential
-->
<project name="FormBuilder" default="all-local">
	
	<!-- Allows for local developer to override settings in a non-versioned file -->
	<property file="user.properties"/>
	
	<!-- This is used when we need to build more than one project, and if there are specific properties per project. For now, we can comment this.
		<property file="../${ant.project.name}-build.properties" />
		-->
	
	<!-- Sets up defaults, including target.context -->
	<!-- <property file="build.properties" /> -->
	
	<!-- Allows for environment-specific properties -->
	<property file="local-build.properties" />
	
    <!-- Source directories -->
    <property name="src"            value="${basedir}/src" />
    <property name="src.java"       value="${src}/main/java" />
    <property name="src.docroot"    value="${src}/main/webapp" />
	<property name="src.context"    value="${src}/main/webapp/WEB-INF/spring" />
	
    <!-- Test directories -->
    <property name="test"           value="${src}/test" />
    <property name="test.java"      value="${test}/java" />
    <property name="junit.style.dir" value="${test}"/>

    <!-- build and temp directories -->
    <property name="build.base"     value="${basedir}/build" />
    <property name="build"          value="${build.base}/build-${target.context}" />
    <property name="dist"           value="${build}/dist" />
    <property name="build.lib"      value="${build}/lib" />
    <property name="build.src"      value="${build}/src" />
    <property name="build.test"     value="${build}/test" />
    <property name="build.testoutput" value="${build}/testoutput" />
    <property name="build.testoutput.junit" value="${build}/testoutput/junit" />

    <!-- webservice build -->
    <property name="build.ws" value="${build}/webservice" />
    <property name="build.ws.src" value="${build.ws}/src" />
    <property name="build.ws.build" value="${build.ws}/build" />

    <!-- tomcat webapp directories to use local build dir as catalina base -->
    <property name="container.instance"  value="${dist}/srv/how-${target.context}/www" />
    <property name="deploy.container.instance" value="/srv/how-${target.context}/www" />
    <property name="tomcat.webapp.dir"   value="${container.instance}/webapps" />
    <property name="build.classes"  value="${container.instance}/webapps/ROOT/WEB-INF/classes" />
	<property name="war.dir" value="${container.instance}/webapps" />
    <property name="war.file" value="${container.instance}/webapps/${ant.project.name}.war" />
    <property name="tomcat.conf.dir"     value="${container.instance}/conf" />
    <property name="tomcat.temp.dir"     value="${container.instance}/temp" />
    <property name="tomcat.logs.dir"     value="${container.instance}/logs" />
    <property name="tomcat.work.dir"     value="${container.instance}/work" />
    <property name="tomcat.startup.delay" value="15" />


    <property name="webapp.dist"    value="${tomcat.webapp.dir}/ROOT" />
	
	<path id="master-classpath" description="Master CLASSPATH for this script">
        <fileset dir="${lib.dir}">
            <include name="*.jar" />
        </fileset>
        <pathelement location="${tomcat.webapp.dir}/ROOT/WEB-INF/classes/" />
    </path>

    <!-- configuration directories -->
    <property name="conf.dir"       value="${basedir}/configuration" />
    <!--<property name="cocoon.web.inf" value="${conf.dir}/cocoon/WEB-INF" /> -->
    <property name="tomcat.conf"    value="${conf.dir}/tomcat/conf" />
    <property name="manifest.dest"  value="${build}/manifest.dest" />

    <property name="application.base.url"
        value="http://localhost:${tomcat.http.port}/" />

    <!-- Multi-platform support for build -->
    <condition property="script.ext" value="sh">
        <os family="unix" />
    </condition>
    <condition property="script.ext" value="bat">
        <os family="windows" />
    </condition>

    <!-- tomcat start and stop scripts -->
    <property name="tomcat.start.cmd"
        value="${tomcat.dir}/bin/startup.${script.ext}" />

    <property name="tomcat.stop.cmd"
        value="${tomcat.dir}/bin/shutdown.${script.ext}" />

    <property name="deploy.tomcat.start.cmd"
        value="${tomcat.dir}/bin/startup.sh" />

    <property name="deploy.tomcat.stop.cmd"
        value="${tomcat.dir}/bin/shutdown.sh" />

    <!-- classpath elements -->
    <path id="axis.classpath">
        <fileset dir="lib" id="axis.jars">
            <include name="axis*/**/*.jar" />
        </fileset>
    </path>

    <!--
	<path id="cocoon.classpath">
        <fileset dir="${cocoon.web.inf}" includes="**/*.jar" />
    </path>
	-->

    <path id="build.class.path">
        <fileset dir="${basedir}/lib" includes="**/*.jar" />
    </path>

    <path id="class.path">
        <path refid="build.class.path" />
        <fileset dir="${build.lib}" includes="**/*.jar" />
    </path>
	
    <path id="test.class.path">
        <path refid="class.path" />
        <path location="${build.test}" />
        <!-- for the *.properties file -->
        <path location="${webapp.dist}/WEB-INF/classes" />
        <!-- ByNameSearchStopWords.txt before it's copied to WEB-INF/classes
        -->
        <path location="configuration" />
    </path>

    <!--
	<taskdef resource="axis-tasks.properties"
        classpathref="axis.classpath" />
	-->
	
	<filterset id="how.base.filter">
	        <filter token="base" value="${how.base}"/>
	        <filter token="webserver" value="${webserver.name}" />
	    </filterset>
    <target name="project-build-help"
        description="Prints to the console build help">
        <echo level="info"><![CDATA[
This Ant build is for the How Form Builder project.

    Prequisites:
        Ant 1.6.1 or greater
        Additional libraries in ant_home/lib directory
        Task dependency     Library
        <junit>             Junit3.8.1 - junit.jar
        <replaceregexp>     OROMatcher jar
        <JUnitReport>       Xalan2.x jar
        <jdepend>           JDepend 2.6 jar
        <clover>            Clover 1.1.1
        <java2html>         j2h.jar 1.3

The application should be built with JDK1.5.0.

]]>
        </echo>
    </target>

    <!-- prerequisite checks -->

    <target name="checkPreconditions"
        depends="warn.fast.build">
        

    </target>

    <target name="warn.fast.build" if="fast.build">
        <echo level="error"
            message="DANGER, Will Robinson, fast build selected; no tests will be run! Use judiciously." />
    </target>


    <!-- clean targets -->
    <target name="clean" description="remove all generated project files">
        <echo level="info">Deleting the ${build} directory.</echo>
        <delete dir="${build}" />
    </target>

    <!-- initialization -->
    <target name="mkdirs"
        description="Creating all necessary directories for deployment"
        depends="checkPreconditions">

        <mkdir dir="${build}" />
        <mkdir dir="${build.lib}" />
        <mkdir dir="${tomcat.conf.dir}" />
        <mkdir dir="${tomcat.logs.dir}" />
        <mkdir dir="${tomcat.temp.dir}" />
        <mkdir dir="${tomcat.work.dir}" />
        <mkdir dir="${webapp.dist}" />
    </target>


    <target
        name="conf.scm"
        description="Determines and loads SCM revision properties."
        depends="mkdirs"
        if="ci.build"
    >
        <chmod file="${basedir}/configuration/meta_scm.sh" perm="a+x"/>

        <exec
            os="Linux"
            append="false"
            failonerror="true"
            logError="true"
            executable="${basedir}/configuration/meta_scm.sh"
            dir="${basedir}"
            output="${build}/meta_scm.properties"
        />

        <property file="${build}/meta_scm.properties"/>

        <echo level="debug">OS=${os.name}</echo>
        <echo level="debug">meta.scm.modified=${meta.scm.modified}</echo>
        <echo level="debug">meta.scm.source.module=${meta.scm.source.module}</echo>
        <echo level="debug">meta.scm.source.tag=${meta.scm.source.tag}</echo>
    </target>

    <target name="copy.resources" >
        <!-- copy resource from source to dest-->
        <copy todir="${build.classes}" overwrite="yes">
            <fileset dir="${src.java}" excludes="**/*.java"/>
<!-- need to add code to copy appropiate deployment.properties file
        	<filterset>
                <filter token="hibernate.connection.url"
                    value="${hibernate.connection.url}"/>
                <filter token="hibernate.connection.username"
                    value="${hibernate.connection.username}"/>
                <filter token="hibernate.connection.password"
                    value="${hibernate.connection.password}"/>
            	<filter token="hibernate.showsql"
            	    value="${hibernate.showsql}"/>
            </filterset>
-->
        </copy>

    </target>

    <!-- build the application -->
    <target name="compile" depends="mkdirs,copy.resources"
        description="Compiles all .java files in the ${src.java} dir.">

        <mkdir dir="${build.classes}" />
        <javac srcdir="${src.java}" destdir="${build.classes}"
               debug="on" deprecation="yes">
            <classpath refid="class.path" />
        </javac>

    </target>

    <!-- <target name="jar" depends="compile, manifest"
        description="Creates a .jar file named ${ant.project.name}.jar">
        <jar jarfile="${build}/lib/${ant.project.name}.jar"
            manifest="${manifest.dest}" >
            <fileset dir="${build.classes}" />
        </jar>
    </target> -->
	
	<target name="war" depends="compile, manifest"
		description="Builds war file">
		<war destfile="${ant.project.name}.war">
			<classes dir="${build.classes}"/>
			<fileset dir="src/main/webapp"/>
			<lib dir="lib">
				<include name="**.jar"/>
				<include name="jstl/**.jar"/>
			</lib>
		</war>
	</target>

    <target name="manifest">
        <tstamp />
        <manifest file="${manifest.dest}" >
            <attribute name="Specification-Title"
                value="Five Star Alliance Hotel Web System" />
            <attribute name="Specification-Version"
                value="${service.version}" />
            <attribute name="Specification-Vendor"
                value="Business Elite" />
            <attribute name="Implementation-Title"
                value="com.businesselite" />
            <attribute name="Implementation-Vendor"
                value="Business Elite" />
            <attribute name="Implementation-Version"
                value="${target.context} ${DSTAMP}.${TSTAMP} $Name:  $" />
        </manifest>
    </target>

    <!-- build the tests -->
    <target name="compile.tests"  unless="fast.build" depends="war"
        description="Compiles all .java files in the ${test.java} dir.">
        <mkdir dir="${build.test}" />
        <javac srcdir="${test.java}" destdir="${build.test}"
            debug="on" deprecation="yes"
            fork="yes" memoryMaximumSize="512m">
            <!-- <classpath refid="class.path" /> -->
        	<classpath refid="test.class.path"/>
        </javac>

        <copy todir="${build.test}">
            <fileset dir="${test.java}" excludes="**/*.java" />
        </copy>
    </target>

    <target name="ci.build.report" if="ci.build">
        <copy overwrite="yes"
            file="${test}/build-report.html"
            tofile="${build.testoutput}/index.html">
            <filterset refid="how.base.filter" />
        </copy>
     </target>
    <target name="dev.build.report" >
        <!-- copy regular build report index -->
    </target>

    <target name="build.report" depends="ci.build.report, dev.build.report" />

    <target name="run.tests"
        depends="build.report, copy.properties"
        unless="fast.build">

        <fileset id="standalone.test.classes"
            dir="${build.test}"
            includes="**/*TestCase.class"
            excludes="**/*WebTestCase.class" />
        <antcall target="junit.tests">
            <reference refid="test.class.path" />
            <reference refid="standalone.test.classes" torefid="test.classes" />
        </antcall>
    </target>

    <target name="run.postdeploy.tests" depends="run.web.tests" />

    <target name="run.web.tests" depends="compile.tests" unless="fast.build">
        <antcall target="do.run.web.tests" />
    </target>

    <target name="do.run.web.tests" unless="fast.build">
        <path id="test.class.path">
            <path refid="class.path" />
            <path location="${build.test}" />
        </path>

        <fileset id="standalone.test.classes"
            dir="${build.test}"
            includes="**/*WebTestCase.class" />
        <antcall target="junit.tests">
            <reference refid="test.class.path" />
            <reference refid="standalone.test.classes" torefid="test.classes" />
        </antcall>

    </target>

    <!-- copy the built app to the deploy dir -->
    <target name="deploy" depends="war, copy.to.deploy" />


    <target name="redeploy" depends="deploy, reload.application"
        description="Deploy to running app server, and then have
        Tomcat reload the application."/>

    <target name="copy.to.deploy"
        depends="conf.scm,
                copy.properties, copy.scripts">
        <copy todir="${tomcat.conf.dir}">
            <fileset dir="${tomcat.conf}" />
            <filterset>
                <filter token="tomcat.server.port"
                    value="${tomcat.server.port}"/>
                <filter token="tomcat.http.port"
                    value="${tomcat.http.port}"/>
                <filter token="tomcat.ajp.port"
                    value="${tomcat.ajp.port}"/>
        <filter token="webserver" value="${webserver.name}" />
				<filter token="proxyhost" value="${proxy.host.name}" />
            </filterset>
        </copy>
        <copy todir="${webapp.dist}">
            <fileset
                dir="${src.docroot}"
                excludes="**/*.html, **/*.js,views/**,fop/**,tags/**"
            />
        </copy>
        <copy todir="${webapp.dist}">
            <fileset
                dir="${src.docroot}"
                includes="**/*.html, **/*.xml, **/*.js"
                excludes="views/**,fop/**,tags/**"
            />
        </copy>
		<copy todir="${webapp.dist}/WEB-INF/" overwrite="yes">
			<fileset
				dir="${src.docroot}"
				includes="views/**, **/*.properties, fop/**,tags/**" />	
		</copy>
        <!-- Note that Tomcat cannot have sub dirs under lib -->
        <copy todir="${webapp.dist}/WEB-INF/lib" flatten="yes" >
            <fileset dir="${build}/lib/" includes="**/*.jar"  />
            <fileset dir="${basedir}/lib">
				<include name="**/*.jar" />
				<exclude name="unittests/**/*.jar" />
				<exclude name="**/servlet-api.jar" />
            </fileset>
        </copy>

        <fixcrlf srcdir="${dist}"
            includes="
                **/*.sh, **/*.xml, **/*.xsl, **/*.xconf, **/*.txt,
                **/*.xmap, **/*.properties, **/*.policy, **/*.html,
                **/*.css, **/*.f*, **/*.js,
                etc/init.d/${target.context}.how.tomcat"
            excludes="**/*.jar, **/*.jpg, **/*.gif, **/*.ico"
            eol="lf"
            eof="remove" />
    
    	<!-- copy war file to Tomcat server -->
    	<copy todir="${tomcat.home}/webapps" file="${ant.project.name}.war"/>
    </target>
	
	<filterset id="hibernate.filters">
        <filter token="hibernate.connection.username"
            value="${hibernate.connection.username}"/>
        <filter token="hibernate.connection.password"
            value="${hibernate.connection.password}"/>
        <filter token="hibernate.connection.url"
            value="${hibernate.connection.url}"/>
        <filter token="hibernate.schema"
            value="${hibernate.schema}"/>
		<filter token="hibernate.showsql"
		    value="${hibernate.showsql}"/>
    </filterset>

    <target name="copy.properties" >
        <copy
            todir="${webapp.dist}/WEB-INF/classes/"
            overwrite="yes">
            <mapper type="glob" from="*.properties.template" to="*.properties" />
            <fileset dir="configuration" includes="*.properties.template"/>
			<filterset>
    			<filter token="url" value="${url.prop}" />
    		</filterset>
         </copy>
        <!-- copy email templates -->
        <copy
            todir="${webapp.dist}/WEB-INF/classes/"
            overwrite="yes">
            <fileset dir="${src.context}" includes="emails/*.html"/>
            <fileset dir="${src.context}" includes="pdfs/*.xml"/>
            <fileset dir="${src.java}" includes="**/log4j.properties"/>
        </copy>
		<copy
			todir="${webapp.dist}/WEB-INF/"
			overwrite="yes">
			<mapper type="glob" from="*.xml" to="*.xml" />
			<fileset dir="${src.context}" includes="*.xml"/>					
			<filterset>
    			<filter token="applicationContextLocations" value="${base.applicationContextLocations}" />
				<filterset refid="hibernate.filters" />
    		</filterset>
		</copy>
    </target>

    <target name="copy.scripts" >
        <mkdir dir="${dist}/opt/how"/>
        <copy
            todir="${dist}/opt/how"
            overwrite="yes">
            <mapper type="glob" from="*.sh.template" to="*.sh" />
            <fileset dir="configuration" includes="*.sh.template"/>
            <filterset>
                <filter token="deploy.tomcat.start.cmd"
                    value="${deploy.tomcat.start.cmd}" />
                <filter token="deploy.tomcat.stop.cmd"
                    value="${deploy.tomcat.stop.cmd}" />
                <filter token="deploy.container.instance"
                    value="${deploy.container.instance}" />
                <filter token="tomcat.dir" value="${tomcat.dir}" />
                <filter token="tomcat.java.home" value="${tomcat.java.home}" />
                <filter token="tomcat.http.port" value="${tomcat.http.port}" />
                <filter token="tomcat.java.opts" value="${tomcat.java.opts}" />
                <filter token="catalina.opts" value="${catalina.opts}" />
            </filterset>
         </copy>
    	<move file="${dist}/opt/how/how.tomcat.sh" tofile="${dist}/opt/how/${target.context}.how.tomcat.sh" />

        <chmod perm="0755">
            <fileset dir="${dist}/opt/how" includes="*.sh" />
        </chmod>

        <mkdir dir="${dist}/etc/init.d"/>
        <copy file="configuration/how.tomcat.template" tofile="${dist}/etc/init.d/${target.context}.how.tomcat">
            <filterset>
                <filter token="target.context" value="${target.context}" />
            </filterset>
        </copy>

        <chmod perm="0755">
            <fileset dir="${dist}/etc/init.d" includes="**/*" />
        </chmod>
    </target>

    

    <target name="clean.webapp.content" >
		<echo level="info">Deleting the ${webapp.dist} directory.</echo>
        <delete>
            <fileset dir="${webapp.dist}" excludes="WEB-INF/lib/**" />
        </delete>
    </target>

    <target name="clean.and.copy.to.deploy"
        depends="clean.webapp.content, copy.to.deploy"
        description="Refreshes webapp docroot content from src/docroot"
    />

    <target name="reload.application" >
        <mkdir dir="${build.testoutput.junit}"/>
        <get dest="${build.testoutput.junit}/manager.html"
            src="http://localhost:${tomcat.http.port}/manager/html/reload?path=/"
            username="admin" password="admin" />
    </target>
    <!-- helper targets -->

    <target name="all" depends="all-local, build.remote.deployment"
        description="Full build locally, or build remote deployment tar file"/>

    <target name="build.remote.deployment" if="tar.build">
        <tar destfile="${build}/how.${target.context}.tar.bz2"
            compression="bzip2"
            longfile="gnu" >
            <tarfileset dir="${dist}"
                includes="**/*"
                excludes="**/*.sh"
                mode="0644"
            />
            <tarfileset dir="${dist}"
                includes="**/*.sh, **/${target.context}.how.tomcat"
                mode="0755"
            />
        </tar>
    </target>
	
    <target name="all-local"
        description="Stops the Tomcat instance,
            rebuilds the project from scratch,
            then restarts Tomcat"
        depends="mkdirs, tomcat.stop, deploy" unless="tar.build" >
        <antcall target="tomcat.start" />
        <sleep seconds="${tomcat.startup.delay}"/>
        <antcall target="run.postdeploy.tests" />
    </target>
	
	<target name="build-all"
		        description="Stops the Tomcat instance,
		            rebuilds the project from scratch,
		            then restarts Tomcat"
		        depends="mkdirs, tomcat.stop, deploy" unless="tar.build" >
		    </target>

    <!-- run the tomcat scripts -->
    <target name="tomcat.stop" unless="tar.build">
        <antcall target="tomcat.script">
            <param name="tomcat.script" value="${tomcat.stop.cmd}"/>
        </antcall>
    </target>

    <target name="tomcat.start" unless="tar.build">
        <antcall target="tomcat.script">
            <param name="tomcat.script" value="${tomcat.start.cmd}"/>
        </antcall>
    </target>
	
	<target name="tomcat-start">
	    <java jar="${tomcat.dir}/bin/bootstrap.jar" fork="true">
	        <jvmarg value="-Dcatalina.home=${tomcat.dir}"/>
	    </java>
	</target>
	
	<target name="tomcat-stop">
	    <java jar="${tomcat.dir}/bin/bootstrap.jar" fork="true">
	        <jvmarg value="-Dcatalina.home=${tomcat.dir}"/>
	        <arg line="stop"/>
	    </java>
	</target>

        <target name="tomcat.restart" unless="tar.build">
        <antcall target="tomcat.stop"/>
        <sleep seconds="${tomcat.startup.delay}"/>
        <antcall target="tomcat.start"/>
        </target>

    <target name="tomcat.script">
        <echo level="info">Starting ${tomcat.script} with docroot ${container.instance}</echo>
        <echo level="info">HTTP Port ${tomcat.http.port}</echo>
        <echo level="info">tomcat.start.cmd=${tomcat.script}</echo>
        <echo level="info">JAVA_HOME=${tomcat.java.home}</echo>
        <echo level="info">CATALINA_BASE=${container.instance}</echo>
        <echo level="info">CATALINA_HOME=${tomcat.dir}</echo>
        <echo level="info">JAVA_OPTS=${tomcat.java.opts}</echo>
        <echo level="info">CATALINA_OPTS=${catalina.opts}</echo>
        <exec spawn="true" dir="${container.instance}"
              executable="${tomcat.start.cmd}">
            <env key="CATALINA_BASE"
                 value="${container.instance}" />
            <env key="CATALINA_HOME"
                 value="${tomcat.dir}" />
            <env key="JAVA_HOME" value="${tomcat.java.home}" />
            <env key="JAVA_OPTS"
                 value="${tomcat.java.opts}" />
            <env key="CATALINA_OPTS"
                 value="${catalina.opts}" />
        </exec>
    </target>

    <!--
      Paramterized reusable targets meant to be pulled out into a library
    -->

    <target name="junit.tests" >
        <description>
            This target is meant to be called by other tasks.
            Either the testcase property must be set to an individual test class
            or the test-classes refid must refer to a fileset containing classes
            to be tested.

            After the tests are completed, a junit report will be produced by
            calling the junit-report target.

            If any test failures or errors occured, then the build will be
            terminated after the report is generated.
        </description>

        <mkdir dir="${build.testoutput.junit}" />

        <junit printsummary="yes" haltonfailure="false" fork="yes"
            jvm="${junit.jvm}">

            <jvmarg value="-Xmx512M"/>

            <sysproperty key="junit.hibernate.connection.username"
                value="${junit.hibernate.connection.username}"/>

            <sysproperty key="junit.hibernate.connection.password"
                value="${junit.hibernate.connection.password}"/>

            <sysproperty key="junit.hibernate.hbm2ddl.auto"
                value="${junit.hibernate.hbm2ddl.auto}"/>

            <sysproperty key="junit.application.base.url"
                value="${application.base.url}"/>

            <classpath refid="test.class.path" />
            <formatter type="xml" />

            <test name="${testcase}"
                todir="${build.testoutput.junit}"
                failureproperty="test.failed"
                if="testcase"/>
            <batchtest todir="${build.testoutput.junit}"
                unless="testcase"
                failureproperty="test.failed" >
                <fileset refid="test.classes" />
            </batchtest>
        </junit>

        <antcall target="junit.report" />

        <fail if="test.failed">Test failure, check test output for details ${build.testoutput}/index.html </fail>

    </target>

    <target name="junit.report" if="ci.build">
        <description>
            Produce an HTML report from the fileset
            ${build.testoutput}/**/Test-*.xml
            Report goes into ${build.testoutput}
        </description>
        <junitreport todir="${build.testoutput.junit}">
            <fileset dir="${build.testoutput.junit}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames"
                styledir="${junit.style.dir}"
                todir="${build.testoutput.junit}"/>
        </junitreport>

        <tstamp />
        <replace dir="${build.testoutput}"
            includes="**/*.html">
            <replacefilter
                token="@@DATE_AND_TIME@@"
                value="${DSTAMP} at ${TSTAMP}" />
            <replacefilter
                token="@@PROJECT_NAME@@"
                value="${ant.project.name}" />
        </replace>

    </target>
</project>
