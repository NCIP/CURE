<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (C) 2013 HealthCare IT, Inc. - All Rights Reserved
  Unauthorized copying or redistribution of this file in source and binary forms via any medium is strictly prohibited
  Proprietary and confidential
-->
<!--
This file was generated by Altova MapForce 2012r2sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" 
   xmlns:uuid="java:java.util.UUID" xmlns:java="java"
    exclude-result-prefixes="xs fn uuid">
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template match="/">
		<xsl:variable name="var1_forms" as="node()?" select="form"/>		
		<cure>
			<xsl:attribute name="xsi:noNamespaceSchemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'FormBuilderExportSchema.xsd'"/>
			<form>
				<xsl:variable name="formUuid_var" select="uuid:randomUUID()"/>
				<xsl:attribute name="id" select="java:java.lang.Object.toString($formUuid_var)"/>
				<!-- Form-related metadata -->
				<xsl:for-each select="$var1_forms">
					<name><xsl:sequence select="fn:string(preferredDefinition)"/></name>
					<cadsrPublicId><xsl:sequence select="fn:string(publicID)"/></cadsrPublicId>
					<cadsrVersion><xsl:sequence select="fn:string(version)"/></cadsrVersion>
					<cadsrCategory><xsl:sequence select="fn:string(categoryName)"/></cadsrCategory>
					<createdBy><xsl:sequence select="fn:string(createdBy)"/></createdBy>
					<modifiedBy><xsl:sequence select="fn:string(modifiedBy)"/></modifiedBy>
				</xsl:for-each>
				
				<!-- Header Instruction -->
				<xsl:variable name="firstInstOrder" select="0"/>
				<xsl:for-each select="$var1_forms/headerInstruction[1]">
					<content>
						<xsl:attribute name="order" select="$firstInstOrder"/>
						<xsl:variable name="headerInstUuid_var" select="uuid:randomUUID()"/>
						<xsl:attribute name="uuid" select="java:java.lang.Object.toString($headerInstUuid_var)"/>
						<description><xsl:sequence select="fn:string(text)"></xsl:sequence></description>
					</content>
				</xsl:for-each>
				
				<!-- Transform each module -->
				<xsl:for-each select="$var1_forms/module">
					<xsl:variable name="moduleDisplayOrder" select="xs:integer(displayOrder)"/>
					<xsl:variable name="previousModules" select="$var1_forms/module[xs:integer(displayOrder) &lt; $moduleDisplayOrder]"/>
					<xsl:variable name="moduleFirstElemDisplayOrder" select="count($var1_forms/headerInstruction) + count($previousModules/preferredDefinition) + (count($previousModules/question)*2)"/>		
					
					<!-- Module header instruction -->					
					<xsl:for-each select="preferredDefinition">
						<content>
							<xsl:attribute name="order" select="xs:string((position()-1) + $moduleFirstElemDisplayOrder)"/>
							<xsl:variable name="contentUuid_var" select="uuid:randomUUID()"/>
							<xsl:attribute name="uuid" select="java:java.lang.Object.toString($contentUuid_var)"/>
							<description><xsl:sequence select="fn:string(.)"/></description>
						</content>
					</xsl:for-each>
				
					<!-- Question Elements -->
					<xsl:variable name="moduleFirstQuestionDisplayOrder" select="$moduleFirstElemDisplayOrder + count(preferredDefinition)"/>	
					<xsl:for-each select="question">
						<xsl:variable name="var2_resultof_first" as="node()" select="dataElement"/>
						<xsl:variable name="multivalue_var" as="xs:boolean" select="count(validValue)>0"/>
						<xsl:variable name="multiselect_var" as="xs:boolean" select="multiValue='Yes'"/>
						<xsl:variable name="defaultvalue_var" as="xs:string" select="if(not(defaultValue)) then 'NO_DEFAULT_VALUE_EXISTS' else defaultValue"/>
						<xsl:variable name="questionInstDisplayOrder" select="xs:integer($moduleFirstQuestionDisplayOrder) + xs:integer(displayOrder*2)"/>
						
						<!-- Question Instruction -->
						<content>
							<xsl:attribute name="order" select="$questionInstDisplayOrder"/>
							<xsl:variable name="contentUuid2_var" select="uuid:randomUUID()"/>
							<xsl:attribute name="uuid" select="java:java.lang.Object.toString($contentUuid2_var)"/>
							<description><xsl:sequence select="if(not(fn:string(instruction/text[1]))) then '   ' else fn:string(instruction/text[1])"/></description>
						</content>
						
						<!-- External Question Element -->
						<xsl:variable name="questionFirstDisplayOrder" select="$questionInstDisplayOrder+1"/>
						<externalQuestionElement>
							<xsl:attribute name="order" select="$questionFirstDisplayOrder"/>
							<xsl:variable name="externalQuestionUuid_var" select="uuid:randomUUID()"/>
							<xsl:attribute name="uuid" select="java:java.lang.Object.toString($externalQuestionUuid_var)"/>
							<xsl:for-each select="isMandatory">
								<xsl:attribute name="isRequired" select="xs:string(fn:string(.)='Yes')"/>
							</xsl:for-each>
							<xsl:for-each select="isEditable">
								<xsl:attribute name="isReadonly" select="xs:string(fn:string(.)='No')"/>
							</xsl:for-each>
							<xsl:attribute name="externalLinkId" select="xs:string(xs:integer(fn:string($var2_resultof_first/publicID)))"/>
							<xsl:attribute name="externalUuid" select="fn:string($var2_resultof_first/id)"/>
							<xsl:attribute name="externalSource" select="'CA_DSR'"/>
							<xsl:for-each select="$var2_resultof_first/preferredDefinition">
								<learnMore>
									<xsl:sequence select="fn:string(.)"/>
								</learnMore>
							</xsl:for-each>
							<descriptions>
							<xsl:for-each select="$var2_resultof_first/referenceDocument/doctext[count(node())>0]">					
								<xsl:if test="position() = 1">
									<mainDescription><xsl:sequence select="fn:string(.)"/></mainDescription>
								</xsl:if>
								<xsl:if test="position() != 1">
									<alternateDescription><xsl:sequence select="fn:string(.)"/></alternateDescription>
								</xsl:if>
							</xsl:for-each>
							</descriptions>
							
							<!-- Question within FormElement -->
							<question>
								<xsl:attribute name="order" select="0"/>
								<xsl:attribute name="questionType" select="'question'"/>
								<xsl:attribute name="answerType" select="if($multivalue_var and $multiselect_var) then 'MULTI_ANSWER' else 'SINGLE_ANSWER'"/>
								<xsl:variable name="questionUuid_var" select="uuid:randomUUID()"/>
								<xsl:attribute name="uuid" select="java:java.lang.Object.toString($questionUuid_var)"/>
								<xsl:attribute name="questionType" select="'question'"/>
								<xsl:for-each select="$var2_resultof_first/shortName">
									<shortName>
										<xsl:sequence select="fn:string(.)"/>
									</shortName>
								</xsl:for-each>
								
								<!-- Answer -->
								<answer>
									<xsl:variable name="answerUuid_var" select="uuid:randomUUID()"/>
									<xsl:attribute name="uuid" select="java:java.lang.Object.toString($answerUuid_var)"/>
									<xsl:variable name="answerDataType">
										<xsl:choose>
											<xsl:when test="$var2_resultof_first/valueDomain/datatypeName='DATE'"><xsl:value-of select="'DATE'"/></xsl:when>
											<xsl:when test="$var2_resultof_first/valueDomain/datatypeName='NUMBER'"><xsl:value-of select="'NUMBER'"/></xsl:when>
											<xsl:otherwise><xsl:value-of select="'TEXT'"/></xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="validValueSet">
										<xsl:choose>
											<xsl:when test="$multivalue_var"><xsl:value-of select="if($multiselect_var) then 'CHECKBOX' else 'RADIO'"/></xsl:when>
											<xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:attribute name="type" select="if(normalize-space($validValueSet)!='') then $validValueSet else $answerDataType"/>
									<description><xsl:value-of select="node()/longName"/></description>
										<xsl:variable name="var_minLen" select="if($answerDataType='TEXT' or $answerDataType='NUMBER') then  $var2_resultof_first/valueDomain/minimumLengthNumber else ''"/>
										<xsl:variable name="var_maxLen" select="if($answerDataType='TEXT' or $answerDataType='NUMBER') then $var2_resultof_first/valueDomain/maximumLengthNumber else ''"/>
										<xsl:variable name="var_minNum" select="if($answerDataType='NUMBER') then $var2_resultof_first/valueDomain/lowValueNumber else ''"/>
										<xsl:variable name="var_maxNum" select="if($answerDataType='NUMBER') then $var2_resultof_first/valueDomain/highValueNumber else ''"/>
										<xsl:variable name="var_valueConstraintExists" select="$var_minLen or $var_maxLen or $var_minNum or $var_maxNum"/>
										<xsl:variable name="var_minAndMaxNumExists" select="$var_minNum and $var_maxNum"/>
										<xsl:if test="$var_valueConstraintExists and not($multivalue_var)">
											<!-- Compute the value constraints -->
											<valueConstraint>
												<xsl:variable name="var_numberConst" select="'999999999999999999999999999999999999999999999999999999999999999999999999999999'"/>
												<xsl:choose>
													<xsl:when test="$var_maxLen and $answerDataType='TEXT'">
														<xsl:value-of select="fn:concat('maxLength:',$var_maxLen)"/>
													</xsl:when>
													<xsl:when test="($var_minLen or $var_maxLen) and $answerDataType='NUMBER'">
														<xsl:variable name="numMinVal" select="if($var_minLen=1) then 0 else xs:string(xs:integer(fn:substring($var_numberConst,1,xs:integer($var_minLen)-1))+1)"/>
														<xsl:variable name="numMaxVal" select="fn:substring($var_numberConst,1,$var_maxLen)"/>
														<xsl:if test="$var_minLen and $var_maxLen and $answerDataType='NUMBER'">
															<xsl:value-of select="fn:concat('min:',$numMinVal,';max:',$numMaxVal)"/>
														</xsl:if>
														<xsl:if test="$var_minLen and not($var_maxLen) and $answerDataType='NUMBER'">
															<xsl:value-of select="fn:concat('min:',$numMinVal)"/>
														</xsl:if>
														<xsl:if test="not($var_minLen) and $var_maxLen and $answerDataType='NUMBER'">
															<xsl:value-of select="fn:concat('max:',$numMaxVal)"/>
														</xsl:if>
													</xsl:when>
													<xsl:when test="$var_minAndMaxNumExists">
														<xsl:value-of select="fn:concat('min:',$var_minNum,';max:',$var_maxNum)"/>
													</xsl:when>
													<xsl:when test="not($var_minAndMaxNumExists) and $var_minNum">
														<xsl:value-of select="fn:concat('min:',$var_minNum)"/>
													</xsl:when>
													<xsl:when test="not($var_minAndMaxNumExists) and $var_maxNum">
														<xsl:value-of select="fn:concat('max:',$var_maxNum)"/>
													</xsl:when>
												</xsl:choose>
											</valueConstraint>
										</xsl:if>
									
									<!-- Answer Value -->
									<xsl:for-each select="validValue">
										<answerValue>
											<xsl:variable name="answerValueUuid_var" select="uuid:randomUUID()"/>
											<xsl:attribute name="uuid" select="java:java.lang.Object.toString($answerValueUuid_var)"/>
											<xsl:attribute name="order" select="displayOrder"/>
											<xsl:attribute name="isDefault" select="meaningText=$defaultvalue_var"/>
											<xsl:attribute name="cadsrPublicId" select="valueMeaning/publicID"/>
											<name><xsl:value-of select="value"/></name>
											<value><xsl:value-of select="value"/></value>
											<description><xsl:value-of select="meaningText"/></description>
											<xsl:if test="meaningText != description">
												<learnMore><xsl:value-of select="description"/></learnMore>
											</xsl:if>
										</answerValue>
									</xsl:for-each>									
								</answer>
								
								<!-- Skip Patterns -->
								<!--<xsl:if test="count(triggerAction) > 0">
									<skipRule>
										<xsl:attribute name="type" select="'formElementType'"/>
										<xsl:attribute name="logicalOp" select="'AND'"/>
										<xsl:attribute name="parentId" select="''"/>
										<xsl:for-each select="triggerAction">
											<questionSkipRule>
												<xsl:attribute name="logicalOp" select="'AND'"/>
												<answerSkipRule>
													<xsl:attribute name="formUUID" select="java:java.lang.Object.toString($formUuid_var)"/>
													<xsl:attribute name="answerValueUUID" select="''"/>
												</answerSkipRule>
											</questionSkipRule>
										</xsl:for-each>
									</skipRule>
								</xsl:if>-->
							</question>
						</externalQuestionElement>
					</xsl:for-each>
				</xsl:for-each>
				
				<!-- Footer Instruction -->
				<xsl:for-each select="$var1_forms/footerInstruction[1]">
					<content>
						<xsl:attribute name="order" select="count(//headerInstruction) + count(//module/preferredDefinition) + (count(//module/question)*2)"/>
						<xsl:variable name="footerInstUuid_var" select="uuid:randomUUID()"/>
						<xsl:attribute name="uuid" select="java:java.lang.Object.toString($footerInstUuid_var)"/>
						<description><xsl:sequence select="fn:string(text)"></xsl:sequence></description>
					</content>
				</xsl:for-each>
			</form>
		</cure>
	</xsl:template>
</xsl:stylesheet>
