<?php
/**
 * Implementation of hook_permission().
 */
function notes_permission() {
  return array(
    'administer notes' => array('title' => t('Administer notes')),
  );
}

/**
 * Implementation of hook_menu
 */
function notes_menu() {
  $items = array();
	$items['admin/config/notes'] = array(
	  'title' => 'Notes Settings',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('notes_settings_form'),
	  'access arguments' => array('administer notes'),
	  'file' => 'notes.admin.inc',
		'type' => MENU_NORMAL_ITEM,
	);
	$items['notes'] = array(
	  'title' => variable_get('notes_menu_title', 'My Notes'),
    'page callback' => 'notes_page',
		'access callback' => 'notes_check_perm',
	  'file' => 'notes.pages.inc',
	  'menu_name' => variable_get('notes_menu', 'primary-links'),
	  'type' => (variable_get('notes_menu_enabled', 0)) ? MENU_SUGGESTED_ITEM : MENU_CALLBACK,
	);
	$items['notes/add'] = array(
	  'title' => t(variable_get('notes_add_title', 'Add Note')),
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('notes_form_add'),
	  'access callback' => 'notes_check_perm',
	  'file' => 'notes.pages.inc',
		'type' => MENU_CALLBACK,
	);
	$items['notes/edit/%'] = array(
	  'title' => t(variable_get('notes_edit_title', 'Edit Note')),
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('notes_form_edit', 2),
	  'access callback' => 'notes_check_perm',
		'file' => 'notes.pages.inc',
		'type' => MENU_CALLBACK,
	);
	$items['notes/delete/%'] = array(
	  'title' => t(variable_get('notes_delete_title', 'Delete Note')),
	  'page callback' => 'drupal_get_form',
		'page arguments' => array('notes_form_delete', 2),
	  'access callback' => 'notes_check_perm',
		'file' => 'notes.pages.inc',
		'type' => MENU_CALLBACK,
	);
	return $items;
}

/**
 * Implementation of hook_theme 
*/
function notes_theme($existing, $type, $theme, $path) {
	return array(
		'notes' => array(
			'variables' => array('nids' => NULL),
      'template' => 'notes',
    ),
  );
}

/**
 * Implementation of hook_block_info()
 */
function notes_block_info() {
  $blocks[0] = array(
    'info' => t('Notes'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view()
 */
function notes_block_view($delta) {
  $block = array();
  switch ($delta) {
    case 0 :
      if(notes_check_perm()) {
        global $user;
        $block['subject'] = t('My Notes');
        $block['content'] = theme('notes', array('nids' => notes_get_user_notes($user->uid)));
      }
      break;
    default:
      break;
  }
  return $block;
}

/**
 * Helper function to check permission for a note
*/
function notes_check_perm() {
  global $user;
  $args = arg();
  $option = '';
  if (isset($args[1])) {
    $option = $args[1];
  }
  // if a note argument is present, we will match it's author against the current user
  if($option == 'edit' || $option == 'delete') {
    if (!empty($args[2])) {
      $nid = $args[2];
      $note = notes_get_note_by_id($nid);
      if($user->uid == $note->uid) {
        return true;
      }
    }
    return false;
  }
  else {
    if (user_is_logged_in()) {
      return true;
    }
  }
  return false;
}

/**
 * Returns a list of user notes.
 */
function notes_get_user_notes($uid) {
  $result = db_select('notes', 'n')->fields('n', array())->condition('n.uid', $uid)->orderBy('created', 'DESC')->execute()->fetchAll();
  return $result;
}

/**
 * Returns a note.
 */
function notes_get_note_by_id($nid) {
  $note = db_select('notes', 'n')->fields('n', array())->condition('n.nid', $nid)->execute()->fetchObject();
  return $note;
}
