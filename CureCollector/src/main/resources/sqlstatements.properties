################################################################################
 #Copyright (C) 2013 HealthCare IT, Inc. - All Rights Reserved
 #Unauthorized copying or redistribution of this file in source and binary forms via any medium is strictly prohibited
 #Proprietary and confidential
################################################################################
getSkippedFormInstances=WITH do_delete_query(form_id, owner_id, instance_id, do_delete) AS (select distinct vw1.form_id, vw1.owner_id, vw1.instance_id, CASE upper(coalesce(logical_op,'OR')) WHEN 'OR' THEN (SELECT EXISTS (SELECT 1 FROM form_skip_vw WHERE do_hide='t' AND form_id=vw1.form_id AND owner_id=vw1.owner_id AND instance_id is not null AND instance_id=vw1.instance_id AND trigger_instance_id=vw1.trigger_instance_id)) ELSE (SELECT NOT EXISTS (SELECT 1 FROM form_skip_vw WHERE do_hide='f' AND form_id=vw1.form_id AND owner_id=vw1.owner_id AND instance_id is not null AND instance_id=vw1.instance_id AND trigger_instance_id=vw1.trigger_instance_id)) END AS "do_delete" from form_skip_vw vw1 where trigger_form_id=?1 and trigger_instance_id=?2 and owner_id=?3) SELECT distinct owner_id, form_id, instance_id from do_delete_query WHERE do_delete='t'
getAvailableParentForms=WITH do_insert_query(trigger_form_id, trigger_instance_id, owner_id, form_id, not_visible, available) AS (select distinct vw1.trigger_form_id, vw1.trigger_instance_id, vw1.owner_id, vw1.form_id, CASE upper(coalesce(logical_op,'OR')) WHEN 'OR' THEN vw1.do_hide ELSE (SELECT EXISTS (SELECT 1 FROM form_skip_vw WHERE do_hide='t' AND form_id=vw1.form_id AND owner_id=vw1.owner_id AND COALESCE(instance_id,0)=COALESCE(vw1.instance_id,0))) END AS "not_visible",f.max_instances > (SELECT count(instance_id) from sharing_group_form_instance where form_id=vw1.form_id AND sharing_group_id=vw1.owner_id AND (parent_instance_id = vw1.trigger_instance_id) AND status<>'NEW') as "available" from form_skip_vw vw1, forms f where f.id = vw1.form_id and f.parent_id = vw1.trigger_form_id and trigger_form_id=?1 and trigger_instance_id=?2 and owner_id=?3 ) SELECT distinct query.trigger_form_id, query.trigger_instance_id, query.form_id, query.owner_id, f.module_id from do_insert_query query, forms f WHERE not_visible='f' and available='t' AND f.id=form_id
getSkippedForms=WITH do_skip_form_query(form_id, owner_id, instance_id, do_skip_form) AS (select distinct vw1.form_id, vw1.owner_id, vw1.instance_id, CASE upper(coalesce(logical_op,'OR')) WHEN 'OR' THEN (SELECT EXISTS (SELECT 1 FROM form_skip_vw WHERE do_hide='t' AND form_id=vw1.form_id AND owner_id=vw1.owner_id AND trigger_instance_id=vw1.trigger_instance_id)) ELSE (SELECT NOT EXISTS (SELECT 1 FROM form_skip_vw WHERE do_hide='f' AND form_id=vw1.form_id AND owner_id=vw1.owner_id AND trigger_instance_id=vw1.trigger_instance_id)) END AS "do_skip_form" from form_skip_vw vw1 where owner_id=?1) SELECT distinct form_id from do_skip_form_query WHERE do_skip_form='t'
getInstanceIdForInstancePosition=select instance_id from sharing_group_form_instance where sharing_group_id=?1 and form_id=?2 order by instance_id limit 1 offset ?3
getInstanceIdForOrdinal=select instance_id from form_instance_data_by_owner_and_child_ordinal where sharing_group_id=?1 and form_id=?2 and ordinal=?3
getInstanceIdAndParentInstanceIdByTreePath=WITH RECURSIVE owner_ancestry(form_id, sharing_group_id, instance_id, parent_instance_id, tree_path) as (SELECT owner.form_id, owner.sharing_group_id, owner.instance_id, owner.parent_instance_id, '' || owner.ordinal FROM form_instance_data_by_owner_and_child_ordinal owner WHERE owner.parent_instance_id IS NULL UNION SELECT d.form_id, d.sharing_group_id, d.instance_id, d.parent_instance_id, o.tree_path || ',' || '' || d.ordinal from owner_ancestry o, form_instance_data_by_owner_and_child_ordinal d, forms f WHERE d.sharing_group_id = o.sharing_group_id and d.form_id = f.id and f.parent_id = o.form_id and d.parent_instance_id=o.instance_id) select instance_id, parent_instance_id from owner_ancestry where sharing_group_id=?1 and form_id=?2 and tree_path=?3
getGatewayFormInstanceMetaData=WITH short_names(form_uuid,question_short_name,table_short_name) AS   (select * from (select form_uuid, question_short_name, null as "table_short_name" from question_element union select form_uuid, question_short_name, table_short_name from table_element) qe   where qe.question_short_name in (:questionShortNameList))  select b."formId", a."questionShortNames", a."tableShortName", b."rootForm" from  (select form_uuid as "formId",    				  array_to_string(array_agg(distinct question_short_name),',') as "questionShortNames",  table_short_name as "tableShortName" from short_names group by form_uuid, table_short_name) a  right join    (WITH RECURSIVE ancestors(form_id, parent_id, form_order) AS   (select f.uuid, f.parent_id, get_form_level(f.uuid) from form f where f.uuid in (select form_uuid from short_names)  UNION   select f.uuid, f.parent_id, form_order+1 from form f, ancestors a where f.uuid = a.parent_id)  select form_id as "formId", form_order as "form_order", get_root_form(form_id) as "rootForm" from ancestors a) b   on a."formId" = b."formId"  order by b."rootForm",b."form_order" desc    